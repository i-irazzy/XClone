#include "functionsforclient.h"
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "clientapi.h"
#include <QMessageBox>

PostModel::PostModel(QObject *parent) : QAbstractListModel(parent) {}

void PostModel::setPosts(const QList<Post> &newPosts) {
    beginResetModel();
    posts = newPosts;
    endResetModel();
}

int PostModel::rowCount(const QModelIndex &parent) const {
    Q_UNUSED(parent);
    return posts.size();
}

QVariant PostModel::data(const QModelIndex &index, int role) const {
    if (!index.isValid() || index.row() >= posts.size()) return QVariant();

    const Post &post = posts.at(index.row());

    if (role == Qt::DisplayRole) {
        return QString("üë§ %1\nüìå %2\n%3").arg(post.username, post.header, post.text);
    }

    if (role == Qt::UserRole) {  // ‚úîÔ∏è –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `int`
        return post.postId.toInt();
    }


    if (role == Qt::DisplayRole && post.username == currentUsername) {
        return QString("üë§ %1\nüìå %2\n%3\nüóë %4").arg(post.username, post.header, post.text, "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç");
    }

    return QVariant();
}

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
    ui(new Ui::MainWindow),
    model(new PostModel(this)),  // –ú–æ–¥–µ–ª—å —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
    newPostForm(new NewPostForm(this)),  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
    client(ClientAPI::getInstance())  // API –∫–ª–∏–µ–Ω—Ç–∞
{
    ui->setupUi(this);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
    setupPostList();

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–ª–æ—Ç—ã
    connect(ui->searchButton, &QPushButton::clicked, this, &MainWindow::SearchPostsByText);
    connect(ui->searchButton_2, &QPushButton::clicked, this, &MainWindow::SearchPostsByUser);
    connect(newPostForm, &NewPostForm::newPostCreated, this, &MainWindow::onNewPostCreated);
    connect(ui->pushButtonNewPost, &QPushButton::clicked, this, &MainWindow::on_pushButtonNewPost_clicked);
}


MainWindow::~MainWindow() {
    delete ui;
}

void MainWindow::setCurrentUser(const QString &username) {
    currentUser = username;
}

void MainWindow::setupPostList() {
    ui->postList->setModel(model);
    // ui->postList->setItemDelegate(new PostDelegate(this));  // ‚úîÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –¥–µ–ª–µ–≥–∞—Ç

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –ø–æ—Å—Ç–∞–º
    connect(ui->postList, &QListView::pressed, this, [&](const QModelIndex &index) {
        if (!index.isValid()) return;

        if (QGuiApplication::mouseButtons() == Qt::RightButton) {  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ü–ö–ú
            Post post = model->posts.at(index.row());

            if (post.username == currentUsername) {  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–∏—Ö –ø–æ—Å—Ç–æ–≤
                QMenu contextMenu;
                QAction *deleteAction = contextMenu.addAction("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç");

                connect(deleteAction, &QAction::triggered, this, [=]() {
                    QMessageBox::StandardButton reply;
                    reply = QMessageBox::question(this, "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞",
                                                  "–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?",
                                                  QMessageBox::Yes | QMessageBox::No);
                    if (reply == QMessageBox::Yes) {
                        if (deletePost(post.postId.toInt())) {
                            QMessageBox::information(this, "–ì–æ—Ç–æ–≤–æ!", "–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.");
                            SearchPosts();  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                        } else {
                            QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç.");
                        }
                    }
                });

                contextMenu.exec(QCursor::pos());
            }
        }
    });
}



void MainWindow::SearchPosts() {
    QString query = ui->searchInput->text().trimmed();

    if (query.isEmpty()) {
        query = "GET_ALL_POSTS";
    }

    qDebug() << "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä: " << query;
    QByteArray response = client->query_to_server(query);
    qDebug() << "–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " << response.trimmed();

    QList<Post> filtered;
    QList<QByteArray> lines = response.split('\n');

    for (const QByteArray &line : lines) {
        QList<QByteArray> parts = line.split('|');  // –§–æ—Ä–º–∞—Ç: id|username|header|text
        if (parts.size() == 4) {
            Post post;
            post.postId   = parts[0];  // ID –ø–æ—Å—Ç–∞ (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
            post.username = QString::fromUtf8(parts[1]);
            post.header   = QString::fromUtf8(parts[2]);
            post.text     = QString::fromUtf8(parts[3]);

            filtered.append(post);
        }
    }

    qDebug() << "–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: " << filtered.size();
    model->setPosts(filtered);
}



void MainWindow::SearchPostsByText() {
    QString searchQuery = ui->searchInput->text().trimmed();

    if (searchQuery.isEmpty()) {
        qDebug() << "–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ, –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫.";
        return;
    }

    qDebug() << "–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É: " << searchQuery;
    QList<Post> filteredPosts = getPostsByText(searchQuery);

    qDebug() << "–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: " << filteredPosts.size();
    model->setPosts(filteredPosts);
}

void MainWindow::SearchPostsByUser() {
    QString usernameQuery = ui->searchInput->text().trimmed();

    if (usernameQuery.isEmpty()) {
        qDebug() << "–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–æ, –æ—Ç–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫.";
        return;
    }

    qDebug() << "–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " << usernameQuery;
    QList<Post> filteredPosts = getPostsByUser(usernameQuery);

    qDebug() << "–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: " << filteredPosts.size();
    model->setPosts(filteredPosts);
}



void MainWindow::on_pushButtonNewPost_clicked() {
    newPostForm->setCurrentUser(currentUser);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    newPostForm->setWindowFlags(Qt::Window);  // –î–µ–ª–∞–µ–º –≤–∏–¥–∂–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
    newPostForm->show();
    newPostForm->raise();
    newPostForm->activateWindow();
}

void MainWindow::onNewPostCreated(QString header, QString text) {
    if (createNewPost(header, text)) {
        SearchPosts();  // –û–±–Ω–æ–≤–∏–º –ø–æ—Å—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
    } else {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç.");
    }
}

void MainWindow::showNewPostForm() {
    newPostForm->setCurrentUser(currentUser);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
    newPostForm->setWindowFlags(Qt::Window);
    newPostForm->show();
    newPostForm->raise();
    newPostForm->activateWindow();
}
